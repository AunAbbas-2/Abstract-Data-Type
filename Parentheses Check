#include<iostream>
#include<vector>
#include<string>
using namespace std;

const int MAX_STACK_SIZE = 100;

struct CharStack{
    char data[MAX_STACK_SIZE];
    int top_index;

    CharStack(){
        top_index = -1;
    }

};

void push(CharStack &s, int value){
    if(s.top_index >= MAX_STACK_SIZE - 1){
        cout << "Stack overflow!"<< endl;
        return;
    }
    s.data[++s.top_index] = value;
}

void pop(CharStack &s){
    if(s.top_index < 0){
        cout<<"Stack underflow!"<<endl;
        return;
    }
    s.top_index--;
}

int top_value(CharStack &s){
    if(s.top_index < 0){
        cout<<"Stack is empty!"<<endl;
        return -1;
    }
    return s.data[s.top_index];
}

bool areParenthesesBalanced(const string& expression){
    CharStack s;
    for(int i = 0;i<expression.length();i++){
        char c = expression[i];

        if(c == '(' || c == '[' || c == '{'){
            push(s, c);
        }

        else if(c == ')' || c == ']' || c == '}'){
            if(s.top_index == -1){
                return false;
            }
            char top = top_value(s);
            if((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{')){
                return false;
            }
            pop(s);
        }
    } 
    return s.top_index = -1;
}

int main(){
    string expression;
    cout<<"Enter a string with parentheses: ";
    cin>>expression;

    if(areParenthesesBalanced(expression)){
        cout<<"Parentheses are Balanced."<<endl;
    }
    else{
        cout<<"Parentheses are not Balanaced."<<endl;
    }

    return 0;
}
